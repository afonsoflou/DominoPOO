@startuml

class Domino {
    - int x
    - int y
    - boolean isVertical
    - boolean connectedX
    - boolean connectedY

    + connectToX()
    + connectToY()
    + int getUnconnected()
    + boolean canConnect(Domino other)
    + int getX()
    + int getY()
    + boolean equals(Object o)
    + Domino equalsClone(Domino domino)
    + int hashCode()
    + boolean isVertical()
    + boolean isDouble()
    + boolean isStarter()
    + String toString()
    + print()
    + flip()
    + beVertical()
    + beHorizontal()
    + int getValue()
}

class GameLine{
    -HashSet<Corner> corners
    -HashSet<Domino> playedDominoes
    -GameBoard board

    + firstPlay(Domino firstDomino, int x, int y)
    + boolean canPlay(Domino dominoToPlay, Domino corner)
    + insertDomino (Domino dominoPlayed, Domino other)
    - shiftTheBoard (Corner anActualCorner, Domino corner, Domino other)
    - generateCorner(Coordinate coordinate, Corner corner, Domino domino, Direction direction)
    - updateCornerCoordinates(Direction direction, int n)
    - updateCornersInTheEdges()
    - updateCornersBlockedBy(Domino other, int x, int y)
    + connectWith(Domino corner, Domino other, Direction direction)
    + HashSet<Domino> getPlayedDominoes()
    - connectToX(Domino corner, Domino other)
    - connectToY(Domino corner, Domino other)
    + Iterable<Domino> getCorners()
    - Corner getCorner(Domino domino)
    - Direction oppositeDirection(Direction direction, Domino domino)

}


class GameBoard {
    - int nLines
    - int nColumns
    - HashTable[] board

    + insertDomino(int x, int y, Domino domino)
    + Iterable<Domino> getCorners()
    - updateCorner(Domino Corner)
    + int getColumns()
    + int getLines()
    + HashSet<Domino> getDominoesInThisRectangle(int x1, int y1, int x2, int y2)
    + boolean isThisRectangleOccupied(int x1, int y1, int x2, int y2)
    + int getNDominoesOnThisRectangle(int x1, int y1, int x2, int y2)
    + shiftUp(int x)
    + shiftDown(int x)
    + shiftRight(int x)
    + shiftLeft(int x)
    - verticalShift(int x)
    + boolean canShiftDown(int n)
    + boolean canShiftUp(int n)
    + boolean canShiftRight(int n)
    + boolean canShiftLeft(int n)
    + printDominoSegment(int segment, Domino Domino)
    + print()
}




abstract class Player {
    # GameLine gameLine
    # LinkedList<Domino> dominoes
    # GameBoard board
    - String playerName

    # printPieces()
    # printPlayablePieces()
    # removeDomino(Domino domino)
    + String getName()
    + int getNumDominoes()
    + boolean isFirst()
    + boolean canPlay()
    + abstract play()
    + int getPoints()
    + boolean isWInner()
    + Domino getDoubleSix()
}

class DominoesGame {
    - int nLines
    - int nColumns
    - Player[] players
    + {Static} final PrintStream out

    + int testAI()
    + startGame()
}

class Human {
    + play()
    - boolean validInputCheck(Domino other, Domino Corner)
}

class NPC {
    + play()
}

class AI {
    + play()
}

class Coordinate{
    +int x
    +int y

    +boolean equals (Object o)
    +int compareTo(Coordinate other)
}

abstract class Corner{
    #Coordinate coordinate
    #Domino domino
    #GameBoard board

    +abstract boolean isCorner()
    +abstract Coordinate getAvailableCoordinate(Direction direction, Domino other)
    +abstract Direction getAvailableDirection(Domino other)
    +abstract updateDirections()
    +boolean isEqual(Domino other)
    +abstract boolean canPlay(Domino other)
    +abstract boolean isShiftNeeded(Domino other)
    +abstract int[] getShiftNTimes(Domino other)
    +abstract Direction[] getShiftDirection(Domino other)
    + shiftUp(int n)
    + shiftDown(int n)
    + shiftRight(int n)
    + shiftLeft(int n)
    # Coordinate getVerticalYCoordinate(Coordinate x)
    # Coordinate getHorizontalYCoordinate(Coordinate x)
    # Coordinate getVerticalDoubleYCoordinate(Coordinate x)
    # Coordinate getHorizontalDoubleYCoordinate(Coordinate x)
    # int amountOfDownShift(int y)
    # int amountOfUpShift(int y)
    # int amountOfLeftShift(int x)
    # int amountOfRightShift(int x)
 }

class CornerIntersection{

 -final Direction[] nextDirection
 -int currentNextDirection
 -Direction getShiftDirection
 -int shiftNTimes

 + boolean isShiftNeeded(Domino other)
 + boolean canPlay(Domino other)
 - blockedDirection(Direction direction)
 + boolean isCorner()
 + Direction getAvailableDirection(Domino other)
 + Coordinate getAvailableCoordinate(Direction direction, Domino other)
 - Coordinate getAvailableCoordinate(Direction direction)
 + updateDirections()
 - boolean isDirectionBlocked(Direction direction)
 - boolean isOutsideTheBoard(Coordinate dummyCoordinate, Coordinate dummyCoordinateY,Direction direction)
 + int[] getShiftNTimes(Domino other)
 + Direction[] getShiftDirection(Domino other)
 - Coordinate verticalAvailableCoordinate(int x)
 - Coordinate horizontalAvailableCoordinate(int x)
}


abstract class CornerLine{
    -Direction[] nextDirection
    -int currentNextDirection
    -Direction
    -boolean lineIsBlocked
    -boolean doubleIsBlocked
    -Direction shiftDirection
    -final Direction[] doubleShiftDirection
    - int shiftNTimes
    - final int[] doubleShiftNTimes

    + boolean canPlay(Domino other)
    + boolean isCorner()
    + updateDirections()
    - boolean isDoubleDirectionBlocked(Direction direction)
    - boolean isLineDirectionBlocked(Direction direction)
    - boolean isDoubleOutsideTheBoard(Coordinate dummyCoordinate, Coordinate dummyCoordinateY)
    - boolean isLineOutsideTheBoard(Coordinate dummyCoordinate, Coordinate dummyCoordinateY, Direction direction)
    - boolean isGeneralDirectionBlocked(Domino dummy, Coordinate dummyCoordinate, Direction direction)
    + Direction[] getShiftDirection(Domino other)
    + int[] getShiftNTimes(Domino other)
    + boolean isShiftNeeded(Domino other)
    + Direction getAvailableDirection(Domino other)
    + Coordinate getAvailableCoordinate(Direction direction, Domino other)
    - Coordinate getVerticalAvailableCoordinate(Domino other)
    - Coordinate getHorizontalAvailableCoordinate(Domino other)
    }

enum Direction{
    LEFT
    UP
    RIGHT
    DOWN
    UpRIGHT
    DownRIGHT
    UpLEFT
    DownLEFT
}

DominoesGame *-- Domino
DominoesGame *-- GameBoard
DominoesGame *-- Player
Corner *-- Coordinate
Corner *-- Direction
GameLine *-- Coordinate
GameLine *-- Direction
GameLine o-- Domino
Player o-- Domino
Player o-- GameLine
Player o-- GameBoard
GameLine o-- GameBoard
Player <|-- Human
Player <|--NPC
NPC <|-- AI
Corner <|-- CornerIntersection
Corner <|-- CornerLine
GameLine *-- Corner

@enduml